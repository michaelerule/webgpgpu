<html>

<!-- This example doesn't use any libraries, just pure Javascript and WebGL;
     its meant as a minimal from-scratch example to get us started
-->

<script id="vertices" type="x-shader/x-vertex">
attribute vec2 a_position;
void main() {
    gl_Position = vec4(a_position, 0, 1);
}
</script>

<script id="fragment" type="x-shader/x-fragment">
void main() {
    gl_FragColor = vec4(
        gl_FragCoord.x<256.?1:0,
        gl_FragCoord.y<256.?1:0,
        mod(floor(gl_FragCoord.y/8.),2.),
        1);
}
</script>

<script>

$ = function(id) { return document.getElementById(id); }

// This is the main script that will run when the website loads
function main()
{
    // Retrieve a handle to the canvas element
    var canvas = $("maincanvas");

    // Try to create a WebGL context on the canvas, abort if it fails
    var gl     = canvas.getContext("webgl")
              || canvas.getContext("experimental-webgl");
    if (!gl) { alert("No Gl?"); return; }

    // Set clear color and then clear the canvas
    gl.clearColor(0.5, 0.7, 0.6, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT);

    // There are two dimensions we need to worry about
    // The canvas itself has a "fictional" dimension which is scaled
    // to the screen dimensions (you can do automatic up or
    // downsampling by setting this higher or lower than the actual
    // on-screen size). The webgl context also has its own ideas
    // about the size of the viewport that must be brought match.
    canvas.width=canvas.height=512;
    gl.viewport(0, 0, canvas.width, canvas.height);

    // We have to manually walk through the compiliation and linking
    // steps for the vertex (polygons) and fragment (pixel) shader
    // programs each program must be created, initialized, compiled,
    // bound to our gl context, and the whole lot must then be linked
    // and put to use.
    var program  = gl.createProgram();
    function loadShader(shaderSource) {
        var shader = shaderSource.type=="x-shader/x-fragment"
            ? gl.createShader(gl.FRAGMENT_SHADER)
            : gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource (shader,shaderSource.text);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }
        gl.attachShader(program, shader);
    }
    loadShader($("vertices"));
    loadShader($("fragment"));
    gl.linkProgram(program);
    gl.useProgram (program);

    // Make a quadrilateral that will serve as the drawing surface
    // Remember that WebGL descends from OpenGL for drawing 3D scenes
    // Think of this as a minimal 3D model serving as a "screen"
    var buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(
        gl.ARRAY_BUFFER,
        new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),
        gl.STATIC_DRAW
    );
    // We also need to manually pass arguments to the shader
    positionLocation = gl.getAttribLocation(program, "a_position");
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

    // Finally, render scene
    gl.drawArrays(gl.TRIANGLES, 0, 6);
}
</script>
<body onload="javascript:main()">
<canvas id='maincanvas' style="width:512px;height:512px;"></canvas>
</body>
</html>
