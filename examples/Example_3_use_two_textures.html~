<html>
<script src="../lib/colormaps.js"></script>

<script id="vertices" type="x-shader/x-vertex">
attribute vec2 a_position;
void main() {
    gl_Position = vec4(a_position, 0, 1);
}
</script>

<script id="fragment" type="x-shader/x-fragment">
precision mediump   float;
uniform   sampler2D u_palette_1;
uniform   sampler2D u_palette_2;
void main() {
    float index  =  mod(gl_FragCoord.x+gl_FragCoord.y,256.);
    // Cannot conditionally sample textures
    // Have to sample both of them?
    vec2 p  = vec2((index + 0.5) / 256.0, 0.5);
    vec4 c1 = texture2D(u_palette_1,p);
    vec4 c2 = texture2D(u_palette_2,p);
    gl_FragColor = gl_FragCoord.x<256.? c1:c2;
}
</script>

<script id="text_fragment" type="x-shader/x-fragment">
void main() {
    gl_FragColor = vec4(
        gl_FragCoord.x<256.?1:0,
        gl_FragCoord.y<256.?1:0,
        mod(floor(gl_FragCoord.y/8.),2.),
        1);
}
</script>

<script>

// Shorthand for getElementById
$ = function(id) { return document.getElementById(id); }

// There's a lot of manual configuration of GPU state needed for webgl
// This piece of code handles creating, compiling, and attaching shader
// programs to a program instance within a particular gl context.
function loadShader(gl,program,shaderSource) {
    var shader = shaderSource.type=="x-shader/x-fragment"
        ? gl.createShader(gl.FRAGMENT_SHADER)
        : gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource (shader,shaderSource.text);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(shader));
        return null;
    }
    gl.attachShader(program, shader);
}

// Wrapper function for getting a WebGL context from a HTML5 canvas
// element. Tries a couple common contexts, and alerts if neither
// can be created.
function getGL(canvas) {
    var gl = canvas.getContext("webgl")
          || canvas.getContext("experimental-webgl");
    if (!gl) {
        alert("Browser does now support WebGL");
        return gl;
    }
    // There are two dimensions we need to worry about
    // The canvas itself has a "fictional" dimension which is scaled to
    // the screen dimensions (you can do automatic up or downsampling by
    // setting this higher or lower than the actual on-screen size). The
    // webgl context also has its own ideas about the size of the viewport
    // that must be brought match.
    gl.viewport(0, 0,
        canvas.width =canvas.clientWidth,
        canvas.height=canvas.clientHeight);
    return gl;
}

// Creates a texture representation of a 256 color map
function create_colormap_texture(gl,data) {
    data = new Uint8Array(data.buffer);
    // Create a 1D colormap texture and move it to the GPU
    // First create a new texture object
    colormap = gl.createTexture()
    // Let the GPU know to operate on the new texture (f'in state machine)
    gl.bindTexture  (gl.TEXTURE_2D, colormap);
    // Say what to do if texture must be scaled upr
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    // Say what to do if texture must be scaled down
    // For real textures, we'd use mipmaps to get efficient downsampling
    // Here, we're just using the texture as a colormap so no need.
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    // Say what to do if we overflow the x direction
    // In this case we extend the color value at the edge
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    // Say what to do if we overflow the y direction
    // In this case we extend the color value at the edge
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    // Allocate memory on the GPU and send texture data over
    gl.texImage2D   (gl.TEXTURE_2D, 0, gl.RGBA, 256, 1, 0, gl.RGBA,
                     gl.UNSIGNED_BYTE,
                     data);
    return colormap;
}

// Make a quadrilateral that will serve as the drawing surface
// Remember that WebGL descends from OpenGL for drawing 3D scenes
// Think of this as a minimal 3D model serving as a "screen"
function gl_raster_mode(gl) {
    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
    gl.bufferData(gl.ARRAY_BUFFER,
        new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),
        gl.STATIC_DRAW);
}

// This is the main script that will run when the website loads
function main()
{
    // Constant initialization
    var N = 512

    // Retrieve a handle to the canvas element
    var canvas = $("maincanvas");

    // Try to create a WebGL context on the canvas, abort if it fails
    var gl = getGL(canvas);
    if (!gl) return;

    // Create a single quad that allows us direct access to pixels
    gl_raster_mode(gl);

    // We have to manually walk through the compiliation and linking
    // steps for the vertex (polygons) and fragment (pixel) shader programs
    // each program must be created, initialized, compiled, bound to our gl
    // context, and the whole lot must then be linked and put to use.
    var program  = gl.createProgram();
    loadShader(gl,program,$("vertices"));
    loadShader(gl,program,$("fragment"));
    gl.linkProgram(program);
    gl.useProgram (program);

    // We also need to manually pass arguments to the shader
    // I think... this tells us to forward vertex attributes to the variable
    // called a_position inside the vertex (geometry) shader
    positionLocation = gl.getAttribLocation(program, "a_position");
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(
        positionLocation, // index (pointer) to variable index (register)
        2,                // size (it's a 2-vector / tuple)
        gl.FLOAT,         // type (floating point, medium precision)
        false,            // normalized (I guess we're not using this)
        0,                // stride (vector is tighly packed, no extra space)
        0);               // pointer (offest to beginning of vector)

    // Render to texture test -- hold on to your hats
    var rttFramebuffer;
    var rttTexture;
    function initTextureFramebuffer() {
        rttFramebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, rttFramebuffer);
        rttTexture = gl.createTexture();
        // Make it the active texture (f'in state machines)
        gl.bindTexture  (gl.TEXTURE_2D, rttTexture);
        // Say what to do if texture must be scaled up
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        // Say what to do if texture must be scaled down
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        // Allocate the GPU memory for this texture
        gl.texImage2D(
            gl.TEXTURE_2D,    // Type (2D)
            0,                // Level (?? WAT)
            gl.RGBA,          // internal format
            canvas.width,     // width
            canvas.height,    // height
            0,                // no border
            gl.RGBA,          // format
            gl.UNSIGNED_BYTE, // data type
            null              // no image data yet
        );
        // Put the new texture in this framebuffer
        gl.framebufferTexture2D(
                gl.FRAMEBUFFER,
                gl.COLOR_ATTACHMENT0,
                gl.TEXTURE_2D,
                rttTexture, 0);
        // Clean up (close state)
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    }
    initTextureFramebuffer();

    colormap1 = create_colormap_texture(gl,colormap1());
    colormap2 = create_colormap_texture(gl,colormap2());

    // Have to connect samplers to texture units
    // lookup the sampler locations.
    var u_image0Location = gl.getUniformLocation(program, "u_palette_1");
    var u_image1Location = gl.getUniformLocation(program, "u_palette_2");
    // set which texture units to render with.
    gl.uniform1i(u_image0Location, 0);  // texture unit 0
    gl.uniform1i(u_image1Location, 1);  // texture unit 1
    // Set each texture unit to use a particular texture.
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, colormap1);
    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, colormap2);

    // Finally, render scene
    // (first set clear color and then clear the canvas)
    gl.clearColor(0.5, 0.7, 0.6, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
}
</script>
<body onload="javascript:main()">
<canvas id='maincanvas' style="width:512px;height:512px;"></canvas>
</body>
</html>
